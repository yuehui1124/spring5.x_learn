AnnotationConfigApplicationContext

GenericApplicationContext  调用 GenericApplicationContext() 构造方法  实例化一个工厂 DefaultListableBeanFactory

1 实例化AnnotatedBeanDefinitionReader  (BD(BeanDefinition)读取器) 给一个类给他他能帮你转化成一个BD 但是只能读取加了注解的类  放到BeanDefinitionMap 中
 AnnotatedBeanDefinitionReader (BeanDefinitionRegistry registry )   BeanDefinition注册器

 AnnotatedBeanDefinitionReader 委托 AnnotationConfigUtils类->AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry)
 ``然后做了哪些事情呢  1、添加AnnotationAwareOrderComparator类的对象，主要去排序
                   2、ContextAnnotationAutowireCandidateResolver 延时加载
                   3、往BeanDefinitionMap注册一个ConfigurationClassPostProcessor?  org.springframework.context.annotation.internalConfigurationAnnotationProcessor
                     why?因为需要在invokeBeanFactoryPostProcessors
                     invokeBeanFactoryPostProcessors主要是在spring的beanFactory初始化的过程中去做一些事情，怎么来做这些事情呢？
                     委托了多个实现了BeanDefinitionRegistryPostProcessor或者BeanFactoryProcessor接口的类来做这些事情,有自定义的也有spring内部的
                     其中ConfigurationClassPostProcessor就是一个spring内部的BeanDefinitionRegistryPostProcessor
                     因为如果你不添加这里就没有办法委托ConfigurationClassPostProcessor做一些功能
                     到底哪些功能？参考下面的注释
                     4、RequiredAnnotationBeanPostProcessor
往BeanDefinition中注册
org/springframework/context/annotation/AnnotationConfigUtils.java 的 registerPostProcessor方法
//准备好bean工厂，实例化对象
org.springframework.context.support.AbstractApplicationContext#refresh
//准备工作包括设置启动时间，是否激活标识位， 初始化属性源(property source)配置
	org.springframework.context.support.AbstractApplicationContext#prepareRefresh

		//得到beanFactory?因为需要对beanFactory进行设置
		org.springframework.context.support.AbstractApplicationContext#obtainFreshBeanFactory
			//准备bean工厂
			1、添加一个类加载器
			2、添加bean表达式解释器，为了能够让我们的beanFactory去解析bean表达式
			3、添加一个后置处理器ApplicationContextAwareProcessor
			4、添加了自动注入别忽略的列表
			5、。。。。。。
	        6、添加了一个ApplicationListenerDetector后置处理器（自行百度）
	        org.springframework.context.support.AbstractApplicationContext#prepareBeanFactory
                目前没有任何实现
                org.springframework.context.support.AbstractApplicationContext#postProcessBeanFactory
                	1、getBeanFactoryPostProcessors()得到自己定义的（就是程序员自己写的，并且没有交给spring管理，就是没有加上@Component）
                	2、得到spring内部自己维护的BeanDefinitionRegistryPostProcessor
                	org.springframework.context.support.AbstractApplicationContext#invokeBeanFactoryPostProcessors
                		//调用这个方法
                		//循环所有的BeanDefinitionRegistryPostProcessor
                		//该方法内部postProcessor.postProcessBeanDefinitionRegistry

 2 ClassPathBeanDefinitionScanner  能够扫描 BD 扫描一个类 并且转化为BD


