join point 连接点  目标对象中的方法

pointcut   切点  表示连接点的集合

target 目标对象 原始对象

aop Proxy 代理对象  包含了原始对象的代码和增加后的代码的那个对象

Weaving :把代理逻辑(方法) 加入到 目标对象上的过程叫做织入


advice    通知 (什么时候通知 和通知的位置)   位置  logic


aop的应用场景
日志记录
权限验证
效率检查
事务管理
.....................


Aop是什么

与OOP对比,面向切面,传统的OOP开发中的代码逻辑是至上而下的,
在这些至上而下的过程中会产生一些横切性的问题,这些横切性的问题和我们的主业务逻辑关系不大,
会散落在代码的各个地方,造成难以维护,AOP的编程思想就是把业务逻辑和横切的问题进行分离,
从而达到解耦的目的,使代码的重用性和开发效率高

springAop的底层技术
JDK动态代理
CGLIB代理
编译时期的织入还是运行时期的织入? 两者都是在运行时期织入
初始化时期织入还是获取对象时期织入? 通过源码分析,可以知道是在初始化时期织入


springAop和AspectJ的关系

spring AOP提供两种编程风格
@AspectJ support         ------------>利用aspectj的注解
Schema-based AOP support ----------->xml aop:config 命名空间

证明:spring,通过源码分析了,我们可以知道spring底层使用的是JDK或者CGLIB来完成的代理,并且在官网上spring给出了aspectj的文档,和springAOP是不同的




